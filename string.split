##import itertools    

## first, convert a DNA sequence into a polypeptide

def proteinTranslation(seq, geneticCode):
    """ This function translates a nucleic acid sequence into 
        a protein sequence, until the end or until it comes 
        across a stop codon """
    
    proteinSeq = []
    i = 0
    while i+2 < len(seq):
        codon = seq[i:i+3]
        try:
            aminoAcid = geneticCode[codon]
        except KeyError:
            print('check error')
        if aminoAcid is None:
            break
        
        proteinSeq.append(aminoAcid)
        i += 3
    return proteinSeq


def back_trans(pep, pos, newseqs, s=''):
    '''
    This function takes a peptide sequence (pep, type str),
    the position on the peptide sequence (pos, type str),
    the list used to store the new sequences (newseqs, type list),
    and part of the newly generated sequence (s, type str) as input.
    It also uses a back translation table (bt, type dict), with the
    amino acids as the keys and the list of corresponding codons as
    values. For example, "A": ['GCA', 'GCC', 'GCG', 'GCT'].
    This recursive function will finally generate a list of
    back-translated DNA sequences of pep.
    '''
    bt = {
        'A': ['GCA', 'GCC', 'GCG', 'GCT'],
        'C': ['TGC', 'TGT'],
        'D': ['GAC', 'GAT'],
        'E': ['GAA', 'GAG'],
        'F': ['TTC', 'TTT'],
        'G': ['GGA', 'GGC', 'GGG', 'GGT'],
        'H': ['CAC', 'CAT'],
        'I': ['ATA', 'ATC', 'ATT'],
        'K': ['AAA', 'AAG'],
        'L': ['CTA', 'CTC', 'CTG', 'CTT', 'TTA', 'TTG'],
        'M': ['ATG'],
        'N': ['AAC', 'AAT'],
        'P': ['CCA', 'CCC', 'CCG', 'CCT'],
        'Q': ['CAA', 'CAG'],
        'R': ['AGA', 'AGG', 'CGA', 'CGC', 'CGG', 'CGT'],
        'S': ['AGC', 'AGT', 'TCA', 'TCC', 'TCG', 'TCT'],
        'T': ['ACA', 'ACC', 'ACG', 'ACT'],
        'V': ['GTA', 'GTC', 'GTG', 'GTT'],
        'W': ['TGG'],
        'Y': ['TAC', 'TAT'],
        '_': ['TAA', 'TAG', 'TGA'],
    }    
    # base case
    if pos == len(pep) - 1:
        for codon in bt[pep[pos]]:
            newseqs.append(s+codon)
        return
    # otherwise
    for codon in bt[pep[pos]]:
        back_trans(pep, pos+1, newseqs, s+codon)

# generate a list of back-translated dna sequences of pep
newseqs = []
pep = 'MGNCNGASK'
back_trans(pep, 0, newseqs)
print(newseqs)
#print("\n".join(newseqs))






       
def main():
    dnaSeq1 = 'ATGggtaaTtgcaacggggCATCCAAG'
    dnaSeq =dnaSeq1.upper()
    STANDARD_GENETIC_CODE = {
    'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',
    'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
    'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',
    'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',
    'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
    'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
    'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',
    'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
    'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
    'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
    'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',
    'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
    'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
    'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',
    'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',
    'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W'}
    ##with open('/Users/pat/documents/____first/genetic_code1.txt', 'r') as fileObj:
        ##fileObj = 
    protein3LetterSeq = proteinTranslation(dnaSeq, STANDARD_GENETIC_CODE)
    print(protein3LetterSeq)
main()


with open('/Users/pat/documents/____first/enzymes_emboss_e.011.txt', 'r') as fileObj:



#header = fileObj.readline()                                         #Don't need this first line
    for eachline in fileObj:
    
        data = eachline.split()
    
        restrict, target_seq = data
    
        print(data)
